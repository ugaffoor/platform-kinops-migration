[
  {
    "message": "Must be an administrator.",
    "name": "Admins",
    "rule": "/* \n * Space admins are allowed access regardless of the the result of security \n * policies.  Returning 'false' denies anyone but a space access. \n */\nfalse",
    "type": "Kapp"
  },
  {
    "message": "Must be authenticated.",
    "name": "Authenticated Users",
    "rule": "identity('authenticated')",
    "type": "Kapp"
  },
  {
    "message": "Coaches/Instructors that need access to all Lead Registrations and Incident Reports",
    "name": "Coaches",
    "rule": "(function() {\n  // Helper method\n  var hasIntersection = function(obj1, obj2) {\n    // Ensure the objects are not empty\n    obj1 = (obj1 === null || obj1 === undefined) ? [] : obj1;\n    obj2 = (obj2 === null || obj2 === undefined) ? [] : obj2;\n    // If the parameters are not lists, wrap them in lists\n    var list1 = (obj1 instanceof Array) ? obj1 : [obj1];\n    var list2 = (obj2 instanceof Array) ? obj2 : [obj2];\n    // Find the intersection\n    var intersection = list1.filter(function(n) {\n      return list2.indexOf(n) != -1;\n    });\n    // Return whether any intersecting values were found\n    return list1.find(function(value) {return hasValue(list2, value)}) !== undefined;\n  };\n  // Helper method\n  var hasValue = function(list, value) {\n    return (list instanceof Array) && list.indexOf(value) != -1\n  };\n\n  // Coach or Program Manager\n  return hasIntersection(identity('teams'), ['Role::Coach','Role::Program Managers']);\n})()\n",
    "type": "Kapp"
  },
  {
    "message": "Everyone is allowed access.",
    "name": "Everyone",
    "rule": "true",
    "type": "Kapp"
  },
  {
    "message": "Must be the user that created the submission.",
    "name": "Submitter",
    "rule": "(submission('anonymous') && submission('sessionToken') == identity('sessionToken'))\n|| (!submission('anonymous') && submission('createdBy') == identity('username'))",
    "type": "Submission"
  }
]